import streamlit as st
from process_data import new_excel, get_min_max_dates
import hashlib
import os

# Configuration du code d'acc√®s depuis st.secrets
def get_access_code_hash():
    """R√©cup√®re le hash du code d'acc√®s depuis st.secrets"""
    try:
        return st.secrets["ACCESS_CODE_HASH"]
    except KeyError:
        st.error("‚ùå Configuration manquante : ACCESS_CODE_HASH non d√©fini dans st.secrets")
        st.stop()

def check_access_code():
    """V√©rifie si l'utilisateur a fourni le bon code d'acc√®s"""
    if 'access_granted' not in st.session_state:
        st.session_state.access_granted = False
    
    if not st.session_state.access_granted:
        # Interface de connexion
        st.markdown("""
        <div style="text-align: center; padding: 50px;">
            <h1>üîê Acc√®s Restreint</h1>
            <p>Veuillez entrer le code d'acc√®s pour continuer</p>
        </div>
        """, unsafe_allow_html=True)
        
        # Centrer le formulaire de connexion
        col1, col2, col3 = st.columns([1, 2, 1])
        with col2:
            with st.form("access_form"):
                access_code = st.text_input("Code d'acc√®s", type="password", placeholder="Entrez votre code")
                submit_button = st.form_submit_button("üîì Acc√©der √† l'application")
                
                if submit_button:
                    if access_code:
                        # V√©rification du code avec hash SHA-256
                        input_hash = hashlib.sha256(access_code.encode()).hexdigest()
                        if input_hash == get_access_code_hash():
                            st.session_state.access_granted = True
                            st.success("‚úÖ Acc√®s autoris√© !")
                            st.rerun()
                        else:
                            st.error("‚ùå Code d'acc√®s incorrect")
                    else:
                        st.error("‚ùå Veuillez entrer un code d'acc√®s")
        
        # Emp√™cher l'acc√®s au reste de l'application
        st.stop()
    
    return True

def main():
    st.set_page_config(
        page_title="IDEO stocks & simulations",
        page_icon="üöÇ",
        layout="wide"
    )
    
    # V√©rification du code d'acc√®s AVANT tout
    if not check_access_code():
        return
    
    # Configuration de la navigation multi-pages
    pages = [
        st.Page("page_reel.py", title="Planification r√©elle", icon="üìä"),
        st.Page("page_correct.py", title="Correction du stock", icon="üîÑ"),
        st.Page("page_simu.py", title="Simulations", icon="üéØ"),
    ]
    
    # Cr√©ation du menu de navigation dans la sidebar
    selected_page = st.navigation(pages, position="sidebar")
    
    # Zone de d√©p√¥t de fichier Excel dans la sidebar
    st.sidebar.subheader("üìÅ Import de donn√©es")

    with st.spinner("V√©rification des donn√©es existantes..."):
        max_date = get_min_max_dates()[1]
    if max_date:
        txt = f"Derni√®res donn√©es datent du {max_date}"
    else:
        txt = "Aucune donn√©e disponible"
    
    uploaded_file = st.sidebar.file_uploader(
        txt,
        type=['xlsx', 'xls'],
        help="‚ö†Ô∏è Les donn√©es du fichier √©crasent celles d√©j√† pr√©sentes pour les m√™mes jours."
    )
    
    if uploaded_file is not None:
        with st.spinner("Import des donn√©es en cours..."):
            if new_excel(uploaded_file):
                st.sidebar.success("Donn√©es import√©es avec succ√®s")
            else:
                st.sidebar.error("Erreur lors de l'import")
    
    # Ex√©cution de la page s√©lectionn√©e
    selected_page.run()

if __name__ == "__main__":
    main() 